"use server"

import { createServerSupabaseClient } from "@/lib/supabase/server"
import { revalidatePath } from "next/cache"
import { cookies } from "next/headers"
import { redirect } from "next/navigation"
import { customizeResumeWithGemini, reviseResumeWithGemini } from "@/lib/gemini-resume-customizer"

// Helper function to get the current user ID
async function getCurrentUserId(): Promise<string> {
  const supabase = createServerSupabaseClient()

  // Try to get user from session first
  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (session?.user?.id) {
    return session.user.id
  }

  // Fallback to cookie
  const cookieStore = cookies()
  const userId = cookieStore.get("user_id")?.value

  if (!userId) {
    // If no user ID is found, redirect to login
    redirect("/login?redirect=" + encodeURIComponent("/dashboard"))
  }

  return userId
}

export async function customizeResumeWithAI({
  baselineResume,
  jobDescription,
  customInstructions,
}: {
  baselineResume: string
  jobDescription: string
  customInstructions?: string
}): Promise<{ success: boolean; customizedResume?: string; error?: string }> {
  try {
    // Call the Gemini API to customize the resume
    const customizedResume = await customizeResumeWithGemini(baselineResume, jobDescription, customInstructions)

    return { success: true, customizedResume }
  } catch (error) {
    console.error("Error customizing resume with AI:", error)
    return {
      success: false,
      error: `Failed to customize resume: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

export async function reviseResumeWithAI({
  currentResume,
  jobDescription,
  customInstructions,
}: {
  currentResume: string
  jobDescription: string
  customInstructions: string
}): Promise<{ success: boolean; revisedResume?: string; error?: string }> {
  try {
    // Call the Gemini API to revise the resume
    const revisedResume = await reviseResumeWithGemini(currentResume, jobDescription, customInstructions)

    return { success: true, revisedResume }
  } catch (error) {
    console.error("Error revising resume with AI:", error)
    return {
      success: false,
      error: `Failed to revise resume: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}

export async function saveCustomizedResume({
  jobId,
  name,
  content,
}: {
  jobId: string
  name: string
  content: string
}): Promise<{ success: boolean; resumeId?: string; error?: string }> {
  try {
    const supabase = createServerSupabaseClient()
    const userId = await getCurrentUserId()

    // Get the job to verify it exists and belongs to the user
    const { data: job, error: jobError } = await supabase
      .from("jobs")
      .select("*")
      .eq("id", jobId)
      .eq("user_id", userId)
      .single()

    if (jobError || !job) {
      return { success: false, error: "Job not found or access denied" }
    }

    // Insert the customized resume
    const { data, error } = await supabase
      .from("resumes")
      .insert({
        user_id: userId,
        job_id: jobId,
        name,
        content,
        is_ai_generated: true, // Set this to true since it's generated by AI
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .select()
      .single()

    if (error) {
      console.error("Error saving customized resume:", error)
      return { success: false, error: "Failed to save customized resume" }
    }

    // Also associate the resume with the job in the job_resumes table
    const { error: associationError } = await supabase.from("job_resumes").insert({
      job_id: jobId,
      resume_id: data.id,
      user_id: userId, // Include user_id for the new column
    })

    if (associationError) {
      console.error("Error associating resume with job:", associationError)
      // Don't return an error here, as the resume was still saved
    }

    // Revalidate the job page to show the new resume
    revalidatePath(`/jobs/${jobId}`)

    return { success: true, resumeId: data.id }
  } catch (error) {
    console.error("Error saving customized resume:", error)
    return {
      success: false,
      error: `Failed to save customized resume: ${error instanceof Error ? error.message : String(error)}`,
    }
  }
}
